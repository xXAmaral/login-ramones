export const Contato = () => {
    return(
        <>
            <h1 className="text-center">Pesquisa sobre o SEO no React</h1>
            <h2><strong>O que é React JS?&nbsp;</strong></h2>
            <p>React é uma biblioteca de códigos e funções baseada em JavaScript usada para construir interfaces de usuário, tendo como principal abordagem uma arquitetura baseada em componentes.</p>
            <p>Cada aplicativo React contém componentes que representam telas ou elementos específicos no aplicativo. Os componentes são um dos blocos de construção básicos do React e representam classes ou funções que aceitam entrada e renderizam os vários elementos HTML.</p>
            <h2><strong>Como funciona React JS SEO</strong></h2>
            <p>Graças à arquitetura <a href="https://reactjs.org/docs/components-and-props.html"><strong>baseada em componentes</strong></a> do React, é fácil reutilizar o código e dividir um aplicativo grande em partes menores. Portanto, manter e depurar grandes projetos de SPA (Single Page Application) é muito mais fácil do que fazer o mesmo para grandes aplicativos de várias páginas. O <a href="https://reactjs.org/docs/faq-internals.html"><strong>DOM virtual</strong></a><strong> </strong>garante alto desempenho do aplicativo. Além disso, a biblioteca React oferece suporte a todos os navegadores modernos, incluindo suas versões mais antigas.&nbsp;</p>
            <p>O React oferece um SPA que solicita Javascript para mostrar o conteúdo da página. Entretanto, os robôs de <a href="https://www.webpeak.com.br/blogs/entenda-como-funciona-o-rastreamento-google"><strong>rastreamento Google</strong></a> (que avaliam todas as páginas da internet) não é tão bom quanto entender uma página com javascript em comparação com uma página que possui código HTML convencional.</p>
            <p>Por um longo período, o Google não conseguia ver o conteúdo que era renderizado com Javascript e costumava recomendar que o conteúdo pudesse ser visto sem ter o Javascript habilitado. Porém, isso mudou! Alguns anos atrás, o Google anunciou que seu robô de rastreamento agora pode renderizar páginas com Javascript e indexá-las.</p>
            <p>Mesmo que o <strong>Google tenha anunciado em 2015 que é capaz de renderizar e </strong><a href="https://www.webpeak.com.br/blogs/passo-a-passo-de-como-indexar-site-no-google"><strong>indexar</strong></a><strong> conteúdo que requer Javascript</strong>, na teoria, isso não deve ser um problema. Todavia, sabemos que teoria e prática nem sempre são iguais. A maioria dos profissionais de SEO concorda que o Google tem mais dificuldade em ler e indexar páginas que requerem Javascript em comparação com páginas que não requerem Javascript.</p>
            <h2>Como funciona o Googlebot</h2>
            <p>O Googlebot é o software do Google responsável por descobrir e indexar conteúdo na web. Como existem muitas páginas para indexar, o Googlebot tem algumas limitações para economizar recursos e conseguir indexar a grande quantidade de páginas que precisa. Uma das limitações prejudiciais ao JavaScript. O crawler faz uma requisição da página ao servidor, lê e indexa o conteúdo do HTML. Como uma execução de JavaScript para muitas páginas é uma tarefa custosa, ou JavaScript da página tem sua execução agendada. Enquanto a indexação do conteúdo pedido no HTML é instantânea, qualquer mudança que o JavaScript faz na página só é percebida pelo robô do Google quando ocorre a execução, o que pode levar até uma semana. Além disso, não existe nem mesmo uma garantia de que todo o JavaScript da página será criada. Para cada página, o bot oferece um orçamento de execução, que é consumido a cada linha de código executado. Quando esse orçamento termina, uma execução é interrompida e o índice do bot ou resultado, que pode ser uma página incompleta.</p>
            <p>Para ter um site ou aplicação web fácil de ser indexado, é possível usar outras estratégias. A mais intuitiva é montar uma página no servidor a cada requisição e entregar o HTML pronto. Também é possível mesclar essa estratégia com a renderização do lado do cliente (CSR) para extrair os melhores benefícios para cada caso. A seguir, vemos essas estratégias, como funciona e para quais casos são mais recomendadas.</p>
            <p>O React auxilia o desenvolvedor a criar uma ótima experiência ao usuário, o que é um dos grandes fatores para uma boa qualidade interna.</p>
            <h2>Renderização do lado do servidor: o melhor amigo do SEO</h2>
            <p>Server-side Rendering (SSR) é, basicamente, gerar um HTML no servidor toda vez que um cliente solicitar uma página. Quando as páginas possuem conteúdos dinâmicos - como portais de notícias, por exemplo - sempre que um navegador tenta acessar uma página, o servidor deve montar o HTML com o conteúdo que é lido do banco de dados. Se as páginas seguirem as melhores práticas de SEO, esse mecanismo de entrega não será um empecilho para que o Googlebot consiga indexar a página rapidamente.</p>
            <p>Ao longo da história da web, várias linguagens de programação e ferramentas foram padrão para tornar mais simples a geração de HTML no lado do servidor. Mesmo com todo o avanço, sempre é necessário utilizar uma linguagem do lado do servidor (PHP, Java, entre outras) e outra para o código do lado do cliente (JavaScript). Os avanços do Node.js tornam possível a barreira, criando o conceito de isomórfico JavaScript. Com essa técnica, é possível desenvolver uma aplicação de forma que a estratégia de entrega não interfira no desenvolvimento. Com alguns cuidados, o desenvolvedor pode desenvolver uma aplicação como desenvolveria uma SPA e uma ferramenta de SSR executa em um Nó de servidor e gera o HTML quando um navegador requisitar uma página. Next ou Gatsby para React são exemplos de ferramentas que permitem renderizar aplicações JavaScript no servidor.</p>
            <p>Em comparação com a renderização do lado do cliente, a geração do HTML no servidor permite que todo o conteúdo da página seja indexado, mas cria uma demanda maior para escalabilidade e custos. Otimizações no código e no banco de dados, além do uso de cache podem mitigar a demanda, mas a estratégia client-side continua sendo melhor esses quesitos.</p>
            <h2>Outras considerações de SEO</h2>
            <p>Essas considerações estão relacionadas ao estabelecimento de boas práticas de SEO em geral.</p>
            <ol>
                <li>Tenha uma estrutura de URL ideal para dar aos humanos e aos mecanismos de pesquisa uma boa ideia sobre o que esperar da página.</li>
                <li>Otimizar o arquivo robots.txt pode ajudar os robôs de pesquisa a entender como rastrear páginas em seu site.
Use um CDN para servir todos os ativos estáticos como CSS, JS, fontes etc. e use imagens responsivas para reduzir o tempo de carregamento.</li>
                <li>Podemos resolver muitos dos problemas descritos acima usando renderização do lado do servidor (SSR) ou pré-renderização. Revisaremos essas abordagens a seguir.</li>
            </ol>
            <h2>Conclusões</h2>
            <p>Não existe apenas uma maneira de fazer o SEO e tomaria muito tempo apra explicar cada uma delas, remonda-se ler os links fontes ao final da página  caso deseja ter um maior conhecimento e se aprofundar no assunto.</p>
            <p>Antes de sair aplicando técnicas em um site, é sempre necessário realizar testes. Projetos que possuem como objetivo melhorar a experiência dos usuários devem ser testados. Para isso, você pode utilizar ferramentas de teste no React, como o <a href="https://jestjs.io/pt-BR/"><strong>Jest</strong></a> (desenvolvida pelo próprio Facebook) e também, testar runner, reports de coverage, snapshots e afins.</p>
            <h3>Para mais informações consulte os links fontes.</h3>
            <p>https://inside.contabilizei.com.br/javascript-seo-desenvolvendo-p%C3%A1ginas-index%C3%A1veis-910bdb64aef5</p>
            <p>https://www.webpeak.com.br/blogs/o-que-e-react-js-e-como-ele-funciona-para-seo</p>
            <p>https://mindconsulting.com.br/2021/08/melhores-praticas-e-estrategias-de-seo-para-react/</p>
        </>
    )
}